compilerOptionsはTypeScriptのファイルがどのようにコンパイルされるかを設定できる

{
  "compilerOptions": {
    /* Basic Options */
    // "incremental": true,                   /* Enable incremental compilation */
☆  "target": "es6" ,
☆  "module": "commonjs" ,
☆  "lib": [
        "DOM", 
        "ES6", 
        "DOM.interable", 
        "ScriptHost"
    ]                                      TypeScriptでコードを書くときにどのようなオブジェクトで機能をdefaultで使えるかを指定する   
＊  "allowJs": true,                       JavaScriptもコンパイルできる
＊  "checkJs": true,                       JavaScriptをコードのチェック対象にできる
＊  "jsx": "preserve",                     Reactを使用する時必要
＊  "declaration": true,                   プロジェクトを他者にライブラリとして公開したい時必要
    // "declarationMap": true,              
☆  "sourceMap": true,                     デバッグ時に役立つ　name.js.mapファイルが生成されdevtoolsに反映
＊  "outFile": "./",                       
☆  "outDir": "./dist",                    TypeScriptをコンパイルしたJavaScriptの出力先を指定する
☆  "rootDir": "./src",                    ソースが配置されるrootフォルダを指定する
＊  // "composite": true,                     
    // "tsBuildInfoFile": "./",              
☆  "removeComments": true,                コード内に記述されたコメントをJavaScriptのファイルから削除する
＊  "noEmit": true,                    　　JavaScriptを出力せず、ソースコードのエラーチェックのみ行う
    // "importHelpers": true,                 
＊  "downlevelIteration": true,            古いバージョンのJavaScriptにコンパイルするときにforループが正しい動作しない場合、正しく出力するように設定できる
    // "isolatedModules": true,     
＊  "noEmitOnError": true         　　　　　コンパイルエラーがある場合はJavaScriptを出力しない

☆  /* Strict Type-Checking Options */　　　TypeScriptの型チェックをどれだけ厳格にするか
    "strict": true ,
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  
    // "noImplicitThis": true,                
    // "alwaysStrict": true,                  

    /* Additional Checks */
    // "noUnusedLocals": true,                
    // "noUnusedParameters": true,            
    // "noImplicitReturns": true,             
    // "noFallthroughCasesInSwitch": true,    

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    // "preserveSymlinks": true,             
    // "allowUmdGlobalAccess": true,          

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */
  },
  "exclude": ["node_modules"] // would be default
}